syntax = "proto3";

package kvstore;

////////////////////////////////////////////////////////////////////////////////
//               The following messages are KV-Store DEPENDENT                //
////////////////////////////////////////////////////////////////////////////////

// An opaque result type for all kv-store operations. Users will define bindings
// to serialize and deserialize the kv-store's result to and from bytes.
message KVStoreResult {
    bytes result = 1;
}

// The result of a kv-store mutation
message MutationResponse {
    ReplicationResult repl_result = 1;
    optional KVStoreResult kvstore_result = 2;
}

// The result of a read to the kv-store
message ReadResponse {
    optional Value value = 1;
    optional KVStoreResult kvstore_result = 2;
}

////////////////////////////////////////////////////////////////////////////////
//              The following messages are KV-Store INDEPENDENT               //
////////////////////////////////////////////////////////////////////////////////

message Empty {}

message Key {
    bytes key = 1;
}

message Value {
    bytes value = 1;
}

message KVPair {
    Key key = 1;
    Value value = 2;
}

// The NuRaft data describing the result of replication
message ReplicationResult {
    int32 rc = 1;
    string msg = 2;
}

message ServerID {
    int32 id = 1;
}

message Endpoint {
    string server_id = 1;
}

message ClientFacingEndpoint {
    ServerID server_id = 1;
    Endpoint client_endpoint = 2;
}

message ClusterEndpoints {
    repeated ClientFacingEndpoint endpoints = 1;
}

message ServerEndpoint {
    ServerID server_id = 1;
    Endpoint raft_endpoint = 2;
    Endpoint client_endpoint = 3;
}

service ReplicatedKVStore {
    rpc Get (Key) returns (ReadResponse) {}

    rpc Put (KVPair) returns (MutationResponse) {}

    rpc Update (KVPair) returns (MutationResponse) {}

    rpc Delete (Key) returns (MutationResponse) {}

    rpc GetLeaderID (Empty) returns (ServerID) {}

    rpc GetClusterEndpoints (Empty) returns (ClusterEndpoints) {}
}

service RaftCluster {
    rpc JoinReplicaSet (ServerEndpoint) returns (ReplicationResult) {}
}